
• Track up to four faces via webcam.  
• Keep your face inside the big green square for two seconds to score.  
• Random bonus (green) and penalty (red) circles spawn for extra risk/reward.  
• A combo counter sweetens back-to-back hits.  
First to rack up the most points before the 60-second timer ends wins.

import cv2
import time
import math
import random
import numpy as np


def main() -> None:
    # -------------------------------------------------------------------
    # 1. Boot-up bits: face detector + webcam + some constants
    # -------------------------------------------------------------------
    face_cascade = cv2.CascadeClassifier(
        cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    if face_cascade.empty():
        print("Failed to load Haar cascade. Check the file path?")
        return

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Couldn’t open webcam. Bye!")
        return

    game_started, game_over = False, False
    total_time  = 60                    # round length (sec)
    start_time  = None

    # multi-player bookkeeping ------------------------------------------
    # pid → {"center":(x,y), "score":int, "stay_start":float|None, "combo":int}
    player_info        = {}
    max_players        = 4
    next_pid           = 1
    distance_threshold = 80             # px: how close two face centers must be to be “same” player

    required_stay_time = 2.0            # seconds inside the main square to score
    score_gain         = 10
    score_loss         = 5

    # optional combo system
    combo_enabled = True
    combo_bonus   = 5                   # extra points per combo level

    # camera resolution
    width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # -------------------------------------------------------------------
    # 2. Main target (big green square) motion parameters
    # -------------------------------------------------------------------
    target_size   = 80
    anchor_x, anchor_y = width // 2, height // 2
    t        = 0.0
    speed    = 1.5                      # how fast the square wiggles
    radius   = 100                      # wiggle amplitude
    phase_x  = random.random() * 2 * math.pi
    phase_y  = random.random() * 2 * math.pi

    # -------------------------------------------------------------------
    # 3. Ephemeral “power-up / penalty” circles
    # -------------------------------------------------------------------
    # each zone dict:
    # {type, cx, cy, radius, start_time, duration, score_change,
    #  stay_required, stay_start{pid:time}, active}
    zones = []
    next_spawn_time     = time.time() + 5
    spawn_cd_min, spawn_cd_max = 5, 10

    # -------------------------------------------------------------------
    # 4. Splash screen – wait for ‘S’ to start
    # -------------------------------------------------------------------
    while True:
        ok, frame = cap.read()
        if not ok:
            break

        cv2.putText(frame, "Press 'S' to start,  'Q' to quit",
                    (50, 220), cv2.FONT_HERSHEY_SIMPLEX,
                    1, (0, 255, 255), 2)
        cv2.imshow("Face Game", frame)

        key = cv2.waitKey(1) & 0xFF
        if key in (ord('s'), ord('S')):
            game_started = True
            start_time   = time.time()
            break
        if key in (ord('q'), ord('Q')):
            cap.release()
            cv2.destroyAllWindows()
            return

    # -------------------------------------------------------------------
    # 5. Main game loop
    # -------------------------------------------------------------------
    while game_started and not game_over:
        ok, frame = cap.read()
        if not ok:
            print("Webcam feed died :(")
            break

        now          = time.time()
        elapsed      = now - start_time
        secs_left    = total_time - elapsed
        if secs_left <= 0:
            game_over = True
            break

        # ---- move the big green square ---------------------------------
        dx = int(radius * math.sin(t * 0.02 + phase_x))
        dy = int(radius * math.cos(t * 0.02 + phase_y))
        cx, cy = anchor_x + dx, anchor_y + dy
        left, right = cx - target_size, cx + target_size
        top,  bottom = cy - target_size, cy + target_size

        # ---- detect faces ----------------------------------------------
        gray  = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)

        seen_this_frame = set()

        for (x, y, w, h) in faces:
            fx, fy = x + w // 2, y + h // 2  # face center

            # link to existing player or create a new one
            chosen_pid, best_d2 = None, float('inf')
            for pid, info in player_info.items():
                px, py = info['center']
                d2 = (px - fx) ** 2 + (py - fy) ** 2
                if d2 < best_d2:
                    best_d2, chosen_pid = d2, pid

            if chosen_pid is not None and math.sqrt(best_d2) < distance_threshold:
                player_info[chosen_pid]['center'] = (fx, fy)
                seen_this_frame.add(chosen_pid)
            else:
                if len(player_info) < max_players:
                    pid = next_pid
                    next_pid += 1
                    player_info[pid] = dict(center=(fx, fy),
                                            score=0,
                                            stay_start=None,
                                            combo=0)
                    seen_this_frame.add(pid)

            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
            cv2.circle(frame, (fx, fy), 5, (0, 0, 255), -1)

        # ---- scoring for the main square -------------------------------
        for pid, info in player_info.items():
            fx, fy       = info['center']
            stay_started = info['stay_start']

            if pid not in seen_this_frame:
                # face vanished – break combo, lose points if mid-stay
                if stay_started is not None:
                    info['score'] -= score_loss
                    info['combo'] = 0
                info['stay_start'] = None
                continue

            inside = left < fx < right and top < fy < bottom
            if inside:
                if stay_started is None:
                    info['stay_start'] = now
                elif now - stay_started >= required_stay_time:
                    # success!
                    gain = score_gain
                    if combo_enabled and info['combo'] > 0:
                        gain += combo_bonus * info['combo']
                    info['score'] += gain
                    info['combo'] += 1
                    info['stay_start'] = None

                    # jitter the square’s phase so it moves elsewhere
                    phase_x = random.random() * 2 * math.pi
                    phase_y = random.random() * 2 * math.pi
            else:
                if stay_started is not None:             # left early
                    info['score'] -= score_loss
                    info['combo'] = 0
                info['stay_start'] = None

        # ----------------------------------------------------------------
        # 6. Spawn / update ephemeral bonus & penalty circles
        # ----------------------------------------------------------------
        if now > next_spawn_time:
            zone_type = random.choice(["powerup", "negative"])
            z = dict(
                type=zone_type,
                cx=random.randint(50, width-50),
                cy=random.randint(50, height-50),
                radius=random.randint(30, 50),
                start_time=now,
                duration=random.randint(3, 6),
                score_change=+15 if zone_type == "powerup" else -10,
                stay_required=1.0,
                stay_start={},          # pid → start_time
                active=True
            )
            zones.append(z)
            next_spawn_time = now + random.uniform(spawn_cd_min, spawn_cd_max)

        for z in zones:
            if not z["active"]:
                continue
            if now - z["start_time"] >= z["duration"]:
                z["active"] = False
                continue

            color = (0, 255, 0) if z["type"] == "powerup" else (0, 0, 255)
            cv2.circle(frame, (z["cx"], z["cy"]), z["radius"], color, 3)

            for pid, info in player_info.items():
                fx, fy = info['center']
                if (fx - z["cx"])**2 + (fy - z["cy"])**2 < z["radius"]**2:
                    # inside the circle
                    if z["stay_start"].get(pid) is None:
                        z["stay_start"][pid] = now
                    elif now - z["stay_start"][pid] >= z["stay_required"]:
                        info['score'] += z["score_change"]
                        z["stay_start"][pid] = None      # one-shot per player
                else:
                    z["stay_start"][pid] = None

        # ----------------------------------------------------------------
        # 7. Draw HUD
        # ----------------------------------------------------------------
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 3)

        cv2.putText(frame, f"Time left: {int(secs_left)}s",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                    1, (255, 255, 0), 2)

        y = 60
        for pid in sorted(player_info):
            info = player_info[pid]
            label = f"Player {pid}: {info['score']}"
            if combo_enabled:
                label += f"  (Combo {info['combo']})"
            cv2.putText(frame, label, (10, y),
                        cv2.FONT_HERSHEY_SIMPLEX, 1,
                        (255, 255, 0), 2)
            y += 30

        # next frame ------------------------------------------------------
        t += speed
        cv2.imshow("Face Game", frame)

        if cv2.waitKey(30) & 0xFF == ord('q'):
            game_over = True
            break

    # -------------------------------------------------------------------
    # 8. Post-game: announce winner & clean up
    # -------------------------------------------------------------------
    cap.release()
    cv2.destroyAllWindows()

    winner_id, winner_score = None, None
    if player_info:
        winner_id, pdata = max(player_info.items(),
                               key=lambda it: it[1]['score'])
        winner_score = pdata['score']

    if winner_id is None or winner_score <= 0:
        print("Game Over! No one cracked zero points. Tough crowd!")
    else:
        print(f"Game Over! Player {winner_id} wins with {winner_score} points!")


if __name__ == "__main__":
    main()
