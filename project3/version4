/**
 * HeartBeat Visualizer — Version 4
 * 
 * Description:
 * This version builds on v3 by dynamically adjusting the frequency of
 * the heartbeat sound based on the BPM value. The faster your heart rate,
 * the higher the pitch of the “thump” sound.
 * 
 * Pulse animation on heartbeat
 * Heartbeat sound
 * BPM-controlled sound frequency (NEW in v4)
 * 
 */

let port;                     // Web Serial port object
let reader;                   // Reader for serial stream
let latestBPM = 0;            // Most recent BPM value
let heartRateHistory = [];   // Rolling history of BPM values (for averaging + graphing)

let scaleFactor = 1;          // Scale multiplier for heart animation
let beatEffect = 0;           // Frame counter for how long the heart stays enlarged

// === Sound-related variables ===
let osc;                      // Oscillator to generate sound
let envelope;                 // Controls sound shape (volume envelope)
let soundEnabled = false;     // Ensures user interaction enables sound context

function setup() {
  createCanvas(windowWidth, windowHeight);
  background(0);

  // Connect button to open Arduino serial
  let connectButton = createButton("Connect Arduino");
  connectButton.position(20, 20);
  connectButton.mousePressed(connectToSerial);

  // Setup oscillator and envelope
  osc = new p5.Oscillator('sine');     // Sine wave = smooth “thump” tone
  envelope = new p5.Envelope();
  envelope.setADSR(0.01, 0.1, 0.1, 0.2);  // Quick thump
  envelope.setRange(0.5, 0);              // Volume from 0.5 to 0 (fade out)

  osc.start();    // Start oscillator (silent until envelope triggers)
  osc.amp(0);

  // Required for browsers to activate sound context
  userStartAudio();
  soundEnabled = true;
}

async function connectToSerial() {
  try {
    port = await navigator.serial.requestPort();  // Ask user for port
    await port.open({ baudRate: 115200 });        // Match Arduino baud rate
    reader = port.readable.getReader();           // Create serial reader
    readSerialData();                             // Start reading stream
    console.log("Serial connection successful!");
  } catch (err) {
    console.error("Serial connection failed:", err);
    alert("Please check Arduino connection");
  }
}

async function readSerialData() {
  while (port.readable) {
    try {
      const { value, done } = await reader.read();  // Read raw bytes
      if (done) break;

      let data = new TextDecoder().decode(value).trim();  // Convert to text
      let bpm = parseInt(data.replace(/\D/g, ""));        // Extract number only

      if (!isNaN(bpm) && bpm > 40) {
        latestBPM = bpm;
        heartRateHistory.push(latestBPM);

        if (heartRateHistory.length > 60) {
          heartRateHistory.shift();  // Limit history length to 60 values
        }

        // === Trigger animation ===
        beatEffect = 15;  // Pulse heart for 15 frames

        // === Play heartbeat sound (frequency tied to BPM) ===
        if (soundEnabled) {
          let freq = map(latestBPM, 40, 180, 50, 150);  // Map BPM to pitch
          freq = constrain(freq, 50, 150);              // Limit frequency range
          osc.freq(freq);
          envelope.play(osc);                           // Play sound with envelope
        }

      } else if (bpm === 0) {
        // No heartbeat detected
        heartRateHistory = [];
        latestBPM = 0;
      }

    } catch (err) {
      console.error("Failed to read data:", err);
      break;
    }
  }
}

// === Draw a mathematical heart shape ===
function drawHeart(x, y, size) {
  beginShape();
  for (let i = 0; i < TWO_PI; i += 0.1) {
    let px = x + size * (16 * pow(sin(i), 3));
    let py = y - size * (
      13 * cos(i) -
      5 * cos(2 * i) -
      2 * cos(3 * i) -
      cos(4 * i)
    );
    vertex(px, py);
  }
  endShape(CLOSE);
}

function draw() {
  background(0);  // Clear canvas

  // === Pulse heart animation logic ===
  if (beatEffect > 0) {
    scaleFactor = 1.2;   // Enlarge heart
    beatEffect -= 1;     // Countdown animation
  } else {
    scaleFactor = lerp(scaleFactor, 1, 0.1);  // Smoothly scale back to 1.0
  }

  // === Calculate average BPM for display ===
  let avgBPM = heartRateHistory.length > 0
    ? heartRateHistory.reduce((a, b) => a + b, 0) / heartRateHistory.length
    : 0;

  // === Draw pulsing heart in center ===
  let baseSize = map(latestBPM, 40, 120, 30, 100);  // Optional: Size maps to BPM
  let heartSize = baseSize * scaleFactor * 0.6;

  fill(255, 0, 0);  // Fixed red color (color mapping comes in v5)
  noStroke();
  drawHeart(width / 2, height / 2, heartSize);

  // === Draw scrolling BPM line graph ===
  stroke(255);
  noFill();
  beginShape();
  for (let i = 0; i < heartRateHistory.length; i++) {
    let x = map(i, 0, heartRateHistory.length, 0, width);
    let y = map(heartRateHistory[i], 40, 120, height / 2 + 100, height / 2 - 100);
    vertex(x, y);
  }
  endShape();

  // === Display BPM values on screen ===
  fill(255);
  textSize(32);
  textAlign(CENTER, CENTER);
  if (latestBPM > 0) {
    text("Current Heart Rate: " + int(latestBPM) + " BPM", width / 2, height - 100);
    text("Average Heart Rate: " + int(avgBPM) + " BPM", width / 2, height - 60);
  } else {
    text("No heartbeat detected", width / 2, height - 80);
  }
}
