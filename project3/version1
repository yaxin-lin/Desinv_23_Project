/**
 * HeartBeat Visualizer â€” Version 1
 * 
 * Description:
 * This is the first version of the heartbeat visualization project.
 * It receives real-time heart rate (BPM) data from an Arduino with a PulseSensor,
 * displays a red heart on screen, draws a live BPM graph, and prints both
 * the current and average BPM as text.
 * 
 * Features in Version 1:
 * Receives BPM data from Arduino over Web Serial
 * Draws a red heart shape in the center of the canvas
 * Displays current and average BPM
 * Renders a scrolling line graph of heart rate history
 * No sound, animation, or color changes yet (added in future versions)
 */

// === Global Variables ===

let port;                // Object representing the selected serial port
let reader;              // Stream reader to read incoming serial data
let latestBPM = 0;       // Stores the most recent valid BPM value from Arduino
let heartRateHistory = [];  // Array to store the latest 60 BPM values (for graphing & averaging)


function setup() {
  createCanvas(windowWidth, windowHeight);  // Create a canvas the size of the browser window
  background(0);                            // Set background color to black

  // Create a button labeled "Connect Arduino" for serial connection
  let connectButton = createButton("Connect Arduino");
  connectButton.position(20, 20);           // Place it near the top-left corner
  connectButton.mousePressed(connectToSerial);  // Set function to run when the button is clicked
}

async function connectToSerial() {
  try {
    // Ask the user to select a serial port
    port = await navigator.serial.requestPort();

    // Open the selected port with a baud rate that matches the Arduino sketch
    await port.open({ baudRate: 115200 });

    // Set up a stream reader to continuously receive incoming data
    reader = port.readable.getReader();

    // Start reading incoming serial data from the Arduino
    readSerialData();

    console.log("Serial connection successful!");
  } catch (err) {
    // If something goes wrong during connection
    console.error("Serial connection failed:", err);
    alert("Please check Arduino connection");
  }
}

async function readSerialData() {
  // Continuously read from the serial stream
  while (port.readable) {
    try {
      // Read one chunk of data from the stream
      const { value, done } = await reader.read();
      if (done) break;  // Exit the loop if the stream ends

      // Decode the received bytes into a string and trim any whitespace
      let data = new TextDecoder().decode(value).trim();

      // Extract numeric portion of the string (strip any non-digits)
      let bpm = parseInt(data.replace(/\D/g, ""));

      // Only accept BPM values greater than 40 to filter out noise
      if (!isNaN(bpm) && bpm > 40) {
        latestBPM = bpm;                 // Store the valid BPM
        heartRateHistory.push(latestBPM);  // Add to BPM history array

        // Limit the history to the most recent 60 values
        if (heartRateHistory.length > 60) {
          heartRateHistory.shift();  // Remove the oldest value
        }

      // If we receive a 0 (signal that heart is not detected), reset everything
      } else if (bpm === 0) {
        heartRateHistory = [];  // Clear the history
        latestBPM = 0;          // Set current BPM to 0
      }

    } catch (err) {
      console.error("Failed to read data:", err);
      break;  // Exit the loop if error occurs
    }
  }
}

// === Function to draw a heart shape ===
// Parameters: (x, y) = center position, size = scale of the heart
function drawHeart(x, y, size) {
  beginShape();
  for (let i = 0; i < TWO_PI; i += 0.1) {
    // Use parametric heart formula
    let px = x + size * (16 * pow(sin(i), 3));
    let py = y - size * (
      13 * cos(i) -
      5 * cos(2 * i) -
      2 * cos(3 * i) -
      cos(4 * i)
    );
    vertex(px, py);
  }
  endShape(CLOSE);
}

function draw() {
  background(0);  // Clear screen with black each frame

  // === Calculate Average BPM from recent history ===
  let avgBPM = heartRateHistory.length > 0
    ? heartRateHistory.reduce((a, b) => a + b, 0) / heartRateHistory.length
    : 0;  // If no data, average is 0

  // === Draw a fixed-size red heart at center ===
  let heartSize = 60;      // Static heart size (no animation in v1)
  fill(255, 0, 0);         // Red fill
  noStroke();              // No border
  drawHeart(width / 2, height / 2, heartSize);  // Draw heart in canvas center

  // === Draw scrolling BPM graph (line graph of recent heart rates) ===
  stroke(255);  // White stroke for line
  noFill();
  beginShape();
  for (let i = 0; i < heartRateHistory.length; i++) {
    let x = map(i, 0, heartRateHistory.length, 0, width);  // Spread data across canvas width
    let y = map(heartRateHistory[i], 40, 120,
                height / 2 + 100, height / 2 - 100);       // Map BPM range to vertical space
    vertex(x, y);  // Add graph point
  }
  endShape();

  // === Draw textual BPM info at bottom ===
  fill(255);                 // White text
  textSize(32);              // Large font
  textAlign(CENTER, CENTER); // Center alignment

  if (latestBPM > 0) {
    // Show current and average heart rate
    text("Current Heart Rate: " + int(latestBPM) + " BPM", width / 2, height - 100);
    text("Average Heart Rate: " + int(avgBPM) + " BPM", width / 2, height - 60);
  } else {
    // If no heartbeat, show fallback message
    text("No heartbeat detected", width / 2, height - 80);
  }
}
